# ===============================================================================
# This actions file runs application process request action tests.
# ===============================================================================
propertyFiles:
  - fileName: "UCADF-Package-Test/Test/UcAdfCoreTestProperties.yml"
  - fileName: "${u:UCADF_STORE}/Instances/${u:ucAdfInstance}/instance.properties"
  - fileName: "${u:UCADF_STORE}/Instances/${u:ucAdfInstance}/instance.secure.properties"
  
actions:
  #==============================================================================          
  # Prepare for tests.
  #==============================================================================          
  # Create the top level group resource.
  - action: UcdCreateGroupResource
    parent: ""
    resource: "${u:coreTestTopResource}"
    failIfExists: false

  # Get the list of agents to have the name of one to create a pool.
  - action: UcdGetAgents
    actionReturnPropertyName: agents
    
  # Create an agent resource.
  - action: UcdCreateAgentResource
    parent: "${u:coreTestTopResource}"
    resource: "Agent"
    agent: "${u:agents/0/name}"
    failIfExists: false

  # Create the application level group resource.
  - action: UcdCreateGroupResource
    parent: "${u:coreTestTopResource}/Agent"
    resource: "${u:coreTestAppTest}"
    failIfExists: false
  
  # Create a component resource.
  - action: UcdCreateComponentResource
    parent: "${u:coreTestTopResource}/Agent/${u:coreTestAppTest}"
    resource: "${u:coreTestCompStandardFull1}"
    component: "${u:coreTestCompStandardFull1}"
    failIfExists: false
    
  # Create an environment.
  - action: UcdCreateEnvironment
    application: "${u:coreTestAppTest}"
    name: "${u:coreTestEnv1}"
    color: "RED"
    description: "Test environment"
    failIfExists: false
    
  # Add base resources to the environment.
  - action: UcdAddEnvironmentBaseResources
    application: "${u:coreTestAppTest}"
    environment: "${u:coreTestEnv1}"
    resources:
      - "${u:coreTestTopResource}/Agent/${u:coreTestAppTest}"
      
  #==============================================================================          
  # Run the tests.
  #==============================================================================          
  # Run a quick application process.
  - action: UcdRunApplicationProcess
    application: "${u:coreTestAppTest}"
    environment: "${u:coreTestEnv1}"
    process: "Quick Test"
    actionReturnPropertyName: "requestStatus"
  - action: UcAdfComment
    actionInfo: false
    comment: "Request status %s"
    values:
      - ${u:requestStatus}
    
  # Set application process request links.
  - action: UcdAddApplicationProcessRequestLinks
    requestId: "${u:requestStatus/requestId}"
    links:
      - title: "MyLink1"
        value: "http://www.google.com"
      - title: "MyLink2"
        value: "http://www.amazon.com"
        
  # Get the application process request.
  - action: UcdGetApplicationProcessRequest
    requestId: "${u:requestStatus/requestId}"
    actionReturnPropertyName: "processRequest"
  - action: UcAdfComment
    actionInfo: false
    comment: "Process request %s"
    values:
      - ${u:processRequest}

  # Run an application process request without required properties (negative test).
  - action: UcdRunApplicationProcess
    application: "${u:coreTestAppTest}"
    environment: "${u:coreTestEnv1}"
    process: "Property Test"
    actionReturnPropertyName: "requestStatus"
    expect: BADREQUEST
    
  # Run an application process request with properties and wait.
  - action: UcdRunApplicationProcess
    application: "${u:coreTestAppTest}"
    environment: "${u:coreTestEnv1}"
    process: "Property Test"
    actionReturnPropertyName: "requestStatus"
    properties:
      - name: "UCADFCORETEST-AppProcess-TextProperty"
        value: "TextPropertyValue"
      - name: "UCADFCORETEST-AppProcess-TextAreaProperty"
        value: "TextAreaPropertyValue"
      - name: "UCADFCORETEST-AppProcess-SecureProperty"
        value: "SecurePropertyValue"
    expect: SUCCESS
    
   # Set additional application process request properties.
  - action: UcdSetApplicationProcessRequestProperties
    requestId: "${u:requestStatus/requestId}"
    properties:
      - name: "MyProperty1"
        value: "MyProperty1Value"
      - name: "MyProperty2"
        value: "MyProperty2Value"
        secure: true
        
  # Get the application process request properties. Return as map.
  - action: UcdGetApplicationProcessRequestProperties
    requestId: "${u:requestStatus/requestId}"
    returnAs: MAPBYNAME
    actionReturnPropertyName: "requestProperty"
  - action: UcAdfComment
    actionInfo: false
    comment: "Property id=[%s] value=[%s] secure=[%s]\nProperty id=[%s] value=[%s] secure=[%s]\nProperty id=[%s] value=[%s] secure=[%s]"
    values: 
      - "${u:requestProperty'/originalRequest/UCADFCORETEST-AppProcess-TextProperty'/id}"
      - "${u:requestProperty'/originalRequest/UCADFCORETEST-AppProcess-TextProperty'/value}"
      - "${u:requestProperty'/originalRequest/UCADFCORETEST-AppProcess-TextProperty'/secure}"
      - "${u:requestProperty/MyProperty1/id}"
      - "${u:requestProperty/MyProperty1/value}"
      - "${u:requestProperty/MyProperty1/secure}"
      - "${u:requestProperty/MyProperty2/id}"
      - "${u:requestProperty/MyProperty2/value}"
      - "${u:requestProperty/MyProperty2/secure}"
      
  # Get the application process request properties. Return as list.
  - action: UcdGetApplicationProcessRequestProperties
    requestId: "${u:requestStatus/requestId}"
    returnAs: LIST
    
  # Run an application process request with properties and don't wait.
  - action: UcdRunApplicationProcess
    application: "${u:coreTestAppTest}"
    environment: "${u:coreTestEnv1}"
    process: "Property Test"
    actionReturnPropertyName: "requestStatus"
    properties:
      - name: "UCADFCORETEST-AppProcess-TextProperty"
        value: "TextPropertyValue"
      - name: "UCADFCORETEST-AppProcess-TextAreaProperty"
        value: "TextAreaPropertyValue"
      - name: "UCADFCORETEST-AppProcess-SecureProperty"
        value: "SecurePropertyValue"
    waitForProcess: false
    expect: GOODREQUEST

  # Wait for the application process to complete.    
  - action: UcdWaitForApplicationProcessRequest
    requestId: "${u:requestStatus/requestId}"
    expect: SUCCESS

  # Create versions to use for testing.
  - action: UcdCreateVersion
    component: "${u:coreTestCompStandardFull1}"
    name: "1.0.0"
    failIfExists: false
  - action: UcdCreateVersion
    component: "${u:coreTestCompStandardFull1}"
    name: "1.1.0"
    failIfExists: false
  - action: UcdCreateVersion
    component: "${u:coreTestCompStandardFull2}"
    name: "2.0.0"
    failIfExists: false
  - action: UcdCreateVersion
    component: "${u:coreTestCompStandardFull2}"
    name: "2.1.0"
    failIfExists: false
    
  # Run an application process with versions.
  - action: UcdRunApplicationProcess
    application: "${u:coreTestAppTest}"
    environment: "${u:coreTestEnv1}"
    process: "Version Test"
    versions:
      - component: "${u:coreTestCompStandardFull1}"
        version: "1.0.0"
      - component: "${u:coreTestCompStandardFull2}"
        version: "2.0.0"
    actionReturnPropertyName: "requestStatus"
  - action: UcAdfComment
    actionInfo: false
    comment: "Request status %s"
    values:
      - ${u:requestStatus}
      
  # Get the application process request versions as returned by the API list collection.
  - action: UcdGetApplicationProcessRequestVersions
    requestId: "${u:requestStatus/requestId}"
    returnAs: MAP
    actionReturnPropertyName: "requestVersions"
  - action: UcAdfItemsLoop
    actionInfo: false
    items: ${u:requestVersions}
    actions:
      - action: UcAdfComment
        actionInfo: false
        comment: "Request version %s"
        values:
          - ${u:item}

  # Show direct access to component version property.
  - action: UcAdfComment
    comment: "Version %s"
    actionInfo: false
    values:
      - "${u:requestVersions/components/UCADFCORETEST-CompStandardFull1/versions/1.0.0/name}"

  # Get the application process request versions as a map/list collection.
  - action: UcdGetApplicationProcessRequestVersions
    requestId: "${u:requestStatus/requestId}"
    returnAs: MAPLIST
    actionReturnPropertyName: "requestVersions"
  - action: UcAdfItemsLoop
    actionInfo: false
    items: ${u:requestVersions}
    actions:
      - action: UcAdfComment
        actionInfo: false
        comment: "Request version %s"
        values:
          - ${u:item}

  # Show direct access to component version property.
  - action: UcAdfComment
    comment: "Version %s"
    actionInfo: false
    values:
      - "${u:requestVersions/components/UCADFCORETEST-CompStandardFull1/versions/0/name}"

  # Run an application process that sleeps and cancel it.
  - action: UcdRunApplicationProcess
    application: "${u:coreTestAppTest}"
    environment: "${u:coreTestEnv1}"
    process: "Sleep Test"
    waitForProcess: false
    properties:
      - name: sleepSecs
        value: 10
    actionReturnPropertyName: "requestStatus"

  # Determine if the application process request is running.
  - action: UcdIsProcessRequestRunning
    requestId: "${u:requestStatus/requestId}"
  - action: UcAdfComment
    actionInfo: false
    comment: "Is running %s"
    values:
      - "${u:actionReturn}"
    
  # Cancel the sleeping process.
  - action: UcdCancelApplicationProcesses
    matchProcess: "^Sleep Test$"

  # Cancel any running test processes.
  - action: UcdCancelApplicationProcesses
    matchProcess: "^Task Test$"

  # =======================================================
  # Application proces request tests.
  # =======================================================
  # Run an application process that has an application manual task.
  - action: UcdRunApplicationProcess
    application: "${u:coreTestAppTest}"
    environment: "${u:coreTestEnv1}"
    process: "Application Task Test"
    waitForProcess: false
    actionReturnPropertyName: "applicationRequestStatus"
  - action: UcAdfComment
    actionInfo: false
    comment: "Application request status %s"
    values:
      - "${u:applicationRequestStatus}"

  # Find the application manual task with the matching status.
  - action: UcAdfSleep
    seconds: 3
  - action: UcdFindProcessRequestTask
    requestId: "${u:applicationRequestStatus/requestId}"
    type: APPLICATIONMANUALTASK
    taskPath: "/.*/Manual Task: TestTask"
    actionReturnPropertyName: "requestTask"
  - action: UcAdfComment
    actionInfo: false
    comment: "Task %s"
    values:
      - "${u:actionReturn}"
      
  # Wait for the application manual task to be waiting for a response.
  - action: UcdWaitForProcessRequestTask
    requestId: "${u:applicationRequestStatus/requestId}"
    processName: "Task Test"
    type: APPLICATIONMANUALTASK
    taskName: "TestTask"
    waitIntervalSecs: 3
    actionReturnPropertyName: "requestTask"
  - action: UcAdfComment
    actionInfo: false
    comment: "Task %s"
    values:
      - "${u:actionReturn}"
      
  # Provide a response to the waiting task.
  - action: UcdProvideTaskResponse
    taskId: "${u:requestTask/id}"
    passFail: PASSED
    comment: "My task comment."
    properties:
      "TextProperty": "Text property value."
      
  # Cancel any currently waiting application tasks.
  - action: UcdCancelProcessRequestTasks
    requestId: "${u:applicationRequestStatus/requestId}"
    type: APPLICATIONMANUALTASK
    processName: "Application Task Test"
    taskName: "TestTask"

  # Cancel any currently waiting processes.
  - action: UcdCancelApplicationProcesses
    matchProcess: "Application Task Test"
    
