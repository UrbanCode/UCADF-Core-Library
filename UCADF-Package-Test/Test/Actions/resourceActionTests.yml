# ===============================================================================
# This actions file runs resource action tests.
# ===============================================================================
propertyFiles:
  - fileName: "UCADF-Package-Test/Test/UcAdfCoreTestProperties.yml"
  - fileName: "${u:UCADF_STORE}/Instances/${u:ucAdfInstance}/instance.properties"
  - fileName: "${u:UCADF_STORE}/Instances/${u:ucAdfInstance}/instance.secure.properties"
  
actions:
  #==============================================================================          
  # Prepare for tests.
  #==============================================================================          
  # Get the list of agents to have the name of one to create a pool.
  - action: UcdGetAgents
    actionReturnPropertyName: agents
    
  # Create an agent pool.
  - action: UcdCreateAgentPool
    name: "${u:coreTestAgentPool1}"
    agents:
      - "${u:agents/0/name}"
    failIfExists: false
    
  # Create a component version.
  - action: UcdCreateVersion
    component: "${u:coreTestComp1}"
    name: "${u:coreTestVersion1}"
    failIfExists: false
    
  # Get application processes.
  - action: UcdGetApplicationProcesses
    application: "${u:coreTestApp1}"
    actionReturnPropertyName: applicationProcesses
    
  #==============================================================================          
  # Run the tests.
  #==============================================================================          
  # Delete existing top level group resource.
  - action: UcdDeleteResource
    resource: "${u:coreTestTopResource}"
  
  # Create the top level group resource.
  # Try to create twice to make sure it works if it already exists.
  - action: UcAdfCounterLoop
    actionInfo: false
    counterBegin: 1 
    counterEnd: 2 
    actions:
      - action: UcdCreateGroupResource
        parent: ""
        resource: "${u:coreTestTopResource}"
        failIfExists: false

  # Create a group resource under the top resource with the specified full path.
  - action: UcdCreateGroupResource
    parent: ""
    resource: "${u:coreTestTopResource}/${u:coreTestGroupResource1}"
    failIfExists: false

  # Update a resource.
  - action: UcdUpdateResource
    resource: "${u:coreTestTopResource}/${u:coreTestGroupResource1}"
    name: "${u:coreTestGroupResource1}"
    description: "Updated description"
    inheritTeam: false
    
  # Create a group resource under the top resource with the specified parent path and resource name.
  - action: UcdCreateGroupResource
    parent: "${u:coreTestTopResource}"
    resource: "${u:coreTestGroupResource2}"
    failIfExists: false

  # Create a resource subtype.
  - action: UcdCreateSecuritySubtype
    type: Resource
    name: "${u:coreTestSecuritySubtypePrefix}Resource"
    description: "Test security subtype description."
    failIfExists: false

  # TODO: Need thorough test scenarios for permutations of this.    
  # Add team security to a specified resource.
  - action: UcdAddResourcesToTeams
    resources:
      - "${u:coreTestTopResource}/${u:coreTestGroupResource1}"
    teams:
      - team: "${u:coreTestTeam1}"
      - team: "${u:coreTestTeam1}"
        subtype: "${u:coreTestSecuritySubtypePrefix}Resource"
    removeOthers: true
    
  # Remove team security from a specified resource.
  - action: UcdRemoveResourcesFromTeams
    resources:
      - "${u:coreTestTopResource}/${u:coreTestGroupResource1}"
    teams:
      - team: "${u:coreTestTeam1}"
    
  # Create an agent pool resource with the specified path.
  # Try to create twice to make sure it works if it already exists.
  - action: UcAdfCounterLoop
    actionInfo: false
    counterBegin: 1 
    counterEnd: 2 
    actions:
      - action: UcdCreateAgentPoolResource
        parent: ""
        resource: "${u:coreTestTopResource}/${u:coreTestAgentPool1}"
        pool: "${u:coreTestAgentPool1}"
        failIfExists: false

  # Create an agent pool resource with the specified parent path and resource name.
  - action: UcdCreateAgentPoolResource
    parent: "${u:coreTestTopResource}"
    resource: "${u:coreTestAgentPool1}"
    pool: "${u:coreTestAgentPool1}"
    failIfExists: false

  # Create an agent resource with the specified path.
  # Try to create twice to make sure it works if it already exists.
  - action: UcAdfCounterLoop
    actionInfo: false
    counterBegin: 1 
    counterEnd: 2 
    actions:
      - action: UcdCreateAgentResource
        parent: ""
        resource: "${u:coreTestTopResource}/${u:agents/0/name}"
        agent: "${u:agents/0/name}"
        failIfExists: false

  # Create an agent resource with the specified parent path and resource name.
  - action: UcdCreateAgentResource
    parent: "${u:coreTestTopResource}"
    resource: "${u:agents/0/name}"
    agent: "${u:agents/0/name}"
    failIfExists: false

  # Create a component resource with the specified path.
  # Try to create twice to make sure it works if it already exists.
  - action: UcAdfCounterLoop
    actionInfo: false
    counterBegin: 1 
    counterEnd: 2 
    actions:
      - action: UcdCreateComponentResource
        parent: ""
        resource: "${u:coreTestTopResource}/${u:agents/0/name}/${u:coreTestComp1}"
        component: "${u:coreTestComp1}"
        failIfExists: false

  # Create a component resource with the specified parent path and resource name.
  - action: UcdCreateComponentResource
    parent: "${u:coreTestTopResource}/${u:agents/0/name}"
    resource: "${u:coreTestComp1}"
    component: "${u:coreTestComp1}"
    failIfExists: false

  # Add resource inventory for a component.
  - action: UcdAddResourceInventory
    requestId: "${u:applicationProcesses/0/id}"
    resource: "${u:coreTestTopResource}/${u:agents/0/name}/${u:coreTestComp1}"
    component: "${u:coreTestComp1}"
    version: "${u:coreTestVersion1}"
    status: "Active"

  # Get resource inventory.
  - action: UcdGetResourceInventory
    resource: "${u:coreTestTopResource}/${u:agents/0/name}/${u:coreTestComp1}"
  - action: UcAdfItemsLoop
    actionInfo: false
    items: ${u:actionReturn}
    actions:
      - action: UcAdfComment
        actionInfo: false
        comment: "Resource inventory %s"
        values:
          - ${u:item}
      - action: UcAdfComment
        actionInfo: false
        comment: "Resource inventory %s"
        values:
          - ${u:item/${u:coreTestVersion1}/version/name}

  # Remove resource inventory for a component.
  - action: UcdRemoveResourceInventory
    resource: "${u:coreTestTopResource}/${u:agents/0/name}/${u:coreTestComp1}"
    component: "${u:coreTestComp1}"
    version: "${u:coreTestVersion1}"

  # Create a resource tag.
  # Try to create twice to make sure it works if it already exists.
  - action: UcAdfCounterLoop
    actionInfo: false
    counterBegin: 1 
    counterEnd: 2 
    actions:
      - action: UcdCreateResourceTag
        name: "${u:coreTestResourceTag1}"
        color: "RED"
        description: "Test resource tag."
        resource: "${u:coreTestTopResource}"
        failIfExists: false
    
  # Add tag to resource.
  - action: UcdAddTagsToResource
    resource: "${u:coreTestTopResource}/${u:coreTestGroupResource1}"
    tags:
      - "${u:coreTestResourceTag1}"
    removeOthers: true

  # Set resource properties.
  - action: UcdSetResourceProperties
    resource: "${u:coreTestTopResource}"
    properties:
      - name: "${u:coreTestProperty1}"
        value: "${u:coreTestProperty1}-Value"

  # Get resource property.
  - action: UcdGetResourceProperty
    resource: "${u:coreTestTopResource}"
    property: "${u:coreTestProperty1}"
  - action: UcAdfComment
    actionInfo: false
    comment: "Resource property %s"
    values:
      - ${u:actionReturn}

  # Get resource properties as list.
  - action: UcdGetResourceProperties
    resource: "${u:coreTestTopResource}"
    returnAs: LIST
  - action: UcAdfItemsLoop
    actionInfo: false
    items: ${u:actionReturn}
    actions:
      - action: UcAdfComment
        actionInfo: false
        comment: "Resource property %s"
        values:
          - ${u:item}
    
  # Get resource properties as map.
  - action: UcdGetResourceProperties
    resource: "${u:coreTestTopResource}"
    returnAs: MAPBYNAME
  - action: UcAdfComment
    actionInfo: false
    comment: "Resource properties %s"
    values:
      - ${u:actionReturn}
    
  # Get child resources.
  - action: UcdGetChildResources
    resource: "${u:coreTestTopResource}"
  - action: UcAdfItemsLoop
    actionInfo: false
    items: ${u:actionReturn}
    actions:
      - action: UcAdfComment
        comment: "%s"
        values:
          - ${u:item/path}

  # Get child resources with tag.
  - action: UcdGetChildResources
    resource: "${u:coreTestTopResource}"
    tag: "${u:coreTestResourceTag1}"
  - action: UcAdfItemsLoop
    actionInfo: false
    items: ${u:actionReturn}
    actions:
      - action: UcAdfComment
        comment: "%s"
        values:
          - ${u:item/path}

  # Remove a resource tag.
  - action: UcdRemoveTagsFromResource
    resource: "${u:coreTestTopResource}"
    tags:
      - "${u:coreTestResourceTag1}"
    
   # Dump resource tree properties.
  - action: UcdDumpResourceTreeProperties
    resource: "${u:coreTestTopResource}"

  # Get a resource property.
  - action: UcdGetResourceProperty
    resource: "${u:coreTestTopResource}"
    property: "${u:coreTestProperty1}"
    failIfNotFound: false
    actionReturnPropertyName: propertyValue
  - action: UcAdfComment
    comment: "Property value=%s"
    values:
      - ${u:propertyValue}
        
  # Wait for a resource property to become available.
  - action: UcdDeleteResourceProperty
    resource: "${u:coreTestTopResource}"
    property: "${u:coreTestProperty1}"
    
  - action: UcAdfWaitLoop
    actionInfo: false
    waitIntervalSecs: 3
    maxWaitSecs: 20
    maxTries: 5
    actions:
      # Get the resource property.
      - action: UcdGetResourceProperty
        resource: "${u:coreTestTopResource}"
        property: "${u:coreTestProperty2}"
        failIfNotFound: false
        actionReturnPropertyName: propertyValue

      # Show the current property value.
      - action: UcAdfComment
        comment: "Property value=%s try=%s"
        values:
          - ${u:propertyValue}
          - ${u:waitLoopControl/currentTry}

      # If the property value has been set then break.          
      - action: UcAdfLoopBreak
        when: '"${u?:propertyValue/id}" != ""'
      - action: UcAdfComment
        comment: "maxwaitSecs=%s"
        values:
          - ${u:waitLoopControl/maxWaitSecs}

      # If the 2nd try then set the resource property.        
      - action: UcdSetResourceProperties
        when: '${u:waitLoopControl/currentTry} == 2'
        resource: "${u:coreTestTopResource}"
        properties:
          - name: "${u:coreTestProperty2}"
            value: "${u:coreTestProperty2}-Value"

  # Create a group resource to be the parent of the move to action.
  - action: UcdCreateGroupResource
    parent: ""
    resource: "${u:coreTestTopResource}/MoveTo"
    failIfExists: false

  # Move a resource.
  - action: UcdMoveResource
    resourceFrom: "${u:coreTestTopResource}/${u:coreTestGroupResource1}"
    resourceTo: "${u:coreTestTopResource}/MoveTo"

  # Rename a resource.
  - action: UcdRenameResource
    resource: "${u:coreTestTopResource}/MoveTo"
    name: "MoveTo2"

  # TBD - Add test after resource template actions have been developed.
  # # Create a resource from a template.
  # - action: UcdCreateResourceFromTemplate
    # parent: ""
    # resource: "${u:coreTestTopResource}/${u:coreTestGroupResource1}-from-${u:coreTestResourceTemplate1}"
    # template: "${u:coreTestResourceTemplate1}"
    # failIfExists: false

  # Find resources.
  - action: UcdFindResources
    parent: "${u:coreTestTopResource}"
    filterFields:
      - fieldName: "name"
        fieldValue: "MoveTo"
        fieldType: "eq"
        fieldClass: "String"
    actionReturnPropertyName: "foundResources"
